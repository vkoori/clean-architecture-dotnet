// <auto-generated />
using System;
using Infrastructure.Persistance.EFCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Persistance.EFCore.Migrations
{
    [DbContext(typeof(MarketingDbContext))]
    [Migration("20230901212125_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Domain.Entities.Marketing.Actions", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<ushort>("DelayMinutes")
                        .HasMaxLength(2880)
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("delay_minutes");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("Setting")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("setting");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasColumnName("type");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("pk_actions");

                    b.ToTable("actions", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Marketing.AfterOrderActions", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("id");

                    b.Property<ulong>("ActionId")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("action_id");

                    b.Property<ulong>("AfterOrderRuleId")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("after_order_rule_id");

                    b.Property<ushort?>("CountExecuted")
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("count_executed");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<ushort?>("MaxExecution")
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("max_execution");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("pk_after_order_actions");

                    b.HasIndex("ActionId")
                        .HasDatabaseName("ix_after_order_actions_action_id");

                    b.HasIndex("AfterOrderRuleId")
                        .HasDatabaseName("ix_after_order_actions_after_order_rule_id");

                    b.ToTable("after_order_actions", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Marketing.AfterOrderRules", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("id");

                    b.Property<string>("CategoryIds")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("category_ids");

                    b.Property<string>("Cities")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("cities");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("description");

                    b.Property<bool>("Enable")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("enable");

                    b.Property<bool?>("FirstOrder")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("first_order");

                    b.Property<bool?>("FirstVoucherUse")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("first_voucher_use");

                    b.Property<bool>("IgnoreVoucher")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("ignore_voucher");

                    b.Property<uint?>("MaxBasketValue")
                        .HasColumnType("int unsigned")
                        .HasColumnName("max_basket_value");

                    b.Property<string>("MaxVersion")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("max_version");

                    b.Property<uint?>("MinBasketValue")
                        .HasColumnType("int unsigned")
                        .HasColumnName("min_basket_value");

                    b.Property<string>("MinVersion")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("min_version");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("Platforms")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("platforms");

                    b.Property<string>("Services")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("services");

                    b.Property<DateOnly?>("StartAt")
                        .HasColumnType("date")
                        .HasColumnName("start_at");

                    b.Property<TimeOnly?>("StartTime")
                        .HasColumnType("time(6)")
                        .HasColumnName("start_time");

                    b.Property<DateOnly?>("StopAt")
                        .HasColumnType("date")
                        .HasColumnName("stop_at");

                    b.Property<TimeOnly?>("StopTime")
                        .HasColumnType("time(6)")
                        .HasColumnName("stop_time");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("VendorSuperTypes")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("vendor_super_types");

                    b.Property<string>("Vendors")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("vendors");

                    b.Property<string>("VoucherIds")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("voucher_ids");

                    b.HasKey("Id")
                        .HasName("pk_after_order_rules");

                    b.ToTable("after_order_rules", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Marketing.AfterRegisterActions", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("id");

                    b.Property<ulong>("ActionId")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("action_id");

                    b.Property<ulong>("AfterRegisterRuleId")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("after_register_rule_id");

                    b.Property<ushort?>("CountExecuted")
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("count_executed");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<ushort?>("MaxExecution")
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("max_execution");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("pk_after_register_actions");

                    b.HasIndex("ActionId")
                        .HasDatabaseName("ix_after_register_actions_action_id");

                    b.HasIndex("AfterRegisterRuleId")
                        .HasDatabaseName("ix_after_register_actions_after_register_rule_id");

                    b.ToTable("after_register_actions", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Marketing.AfterRegisterRules", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("id");

                    b.Property<string>("Cities")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("cities");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("description");

                    b.Property<bool>("Enable")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("enable");

                    b.Property<bool?>("HasReferrer")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("has_referrer");

                    b.Property<string>("MaxVersion")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("max_version");

                    b.Property<string>("MinVersion")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("min_version");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("Platforms")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("platforms");

                    b.Property<DateOnly?>("StartAt")
                        .HasColumnType("date")
                        .HasColumnName("start_at");

                    b.Property<TimeOnly?>("StartTime")
                        .HasColumnType("time(6)")
                        .HasColumnName("start_time");

                    b.Property<DateOnly?>("StopAt")
                        .HasColumnType("date")
                        .HasColumnName("stop_at");

                    b.Property<TimeOnly?>("StopTime")
                        .HasColumnType("time(6)")
                        .HasColumnName("stop_time");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("pk_after_register_rules");

                    b.ToTable("after_register_rules", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Marketing.Campaigns", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<ushort>("From")
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("from");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<ushort>("To")
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("to");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("pk_campaigns");

                    b.ToTable("campaigns", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Marketing.ProcessedOrders", b =>
                {
                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<ulong>("ActionId")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("action_id");

                    b.Property<ulong>("AfterOrderRuleId")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("after_order_rule_id");

                    b.Property<ulong>("OrderId")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("order_id");

                    b.HasKey("CreatedAt")
                        .HasName("pk_processed_orders");

                    b.HasIndex("OrderId")
                        .HasDatabaseName("ix_processed_orders_order_id");

                    b.ToTable("processed_orders", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Marketing.Reports", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("id");

                    b.Property<int>("ActionType")
                        .HasColumnType("int")
                        .HasColumnName("action_type");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Extra")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("extra");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<ulong>("UserId")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_reports");

                    b.ToTable("reports", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Marketing.AfterOrderActions", b =>
                {
                    b.HasOne("Domain.Entities.Marketing.Actions", "ActionBelong")
                        .WithMany("ActionAfterOrder")
                        .HasForeignKey("ActionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_after_order_actions_actions_action_belong_id");

                    b.HasOne("Domain.Entities.Marketing.AfterOrderRules", "AfterOrderRuleBelong")
                        .WithMany("AfterOrderRuleAfterOrder")
                        .HasForeignKey("AfterOrderRuleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_after_order_actions_after_order_rules_after_order_rule_belong_id");

                    b.Navigation("ActionBelong");

                    b.Navigation("AfterOrderRuleBelong");
                });

            modelBuilder.Entity("Domain.Entities.Marketing.AfterRegisterActions", b =>
                {
                    b.HasOne("Domain.Entities.Marketing.Actions", "ActionBelong")
                        .WithMany("ActionAfterRegister")
                        .HasForeignKey("ActionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_after_register_actions_actions_action_belong_id");

                    b.HasOne("Domain.Entities.Marketing.AfterRegisterRules", "AfterRegisterRuleBelong")
                        .WithMany("AfterRegisterRuleAfterRegister")
                        .HasForeignKey("AfterRegisterRuleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_after_register_actions_after_register_rules_after_register_rul");

                    b.Navigation("ActionBelong");

                    b.Navigation("AfterRegisterRuleBelong");
                });

            modelBuilder.Entity("Domain.Entities.Marketing.Actions", b =>
                {
                    b.Navigation("ActionAfterOrder");

                    b.Navigation("ActionAfterRegister");
                });

            modelBuilder.Entity("Domain.Entities.Marketing.AfterOrderRules", b =>
                {
                    b.Navigation("AfterOrderRuleAfterOrder");
                });

            modelBuilder.Entity("Domain.Entities.Marketing.AfterRegisterRules", b =>
                {
                    b.Navigation("AfterRegisterRuleAfterRegister");
                });
#pragma warning restore 612, 618
        }
    }
}
